install.packages("pheatmap")
#plot the heatmap
library(pheatmap)
pheatmap(rld_cor, annotation = meta)
pdf("./results/PlotHeatmap_dds.pdf")
heat.colors <- RColorBrewer::brewer.pal(6, "Blues")
pheatmap(rld_cor, annotation = meta, color = heat.colors, border_color=NA, fontsize = 10,
fontsize_row = 10, height=20)
#load EdgeR package
library(edgeR)
options(digits=3)
#read files
infection.targets<-read.delim("./data/fileDesc.txt")
#check Coinfection.targets
infection.targets
#change the rawnames
rownames(infection.targets)<-c("Ha1","Ha2","Ha3","Ctr1","Ctr2","Ctr3")
#change the rawnames
rownames(infection.targets)<-c("Ha1","Ha2","Ha3","Ctr1","Ctr2","Ctr3")
#check the rawnames
infection.targets
#
infection <- readDGE(infection.targets, header=F)
#change the rawnames
rownames(infection.targets)<-c("Ha1","Ha2","Ha3","Ctr1","Ctr2","Ctr3")
#check the rawnames
infection.targets
#read and merges the files
infection <- readDGE(infection.targets, header=F)
#Check the dimension of DGElist R object
dim(infection)
head(infection)
#Get the raw mapped count before filtering
infection.rawCount <- infection$count
head(infection.rawCount)
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
#plot a histogram of the counts for a single sample, ‘Ha1’
ggplot(infection.rawCount) +
geom_histogram(aes(x = Ha1), stat = "bin", bins = 200) +
xlab("Raw expression counts") +
ylab("Number of genes")
#Export the .png file
png("./results/count distribution.png", res=300, height=1800, width=1800)
ggplot(infection.rawCount) +
geom_histogram(aes(x = Ha1), stat = "bin", bins = 200) +
xlab("Raw expression counts") +
ylab("Number of genes")
dev.off()
#Export raw count table into results folder
write.csv(infection.rawCount, file="./results/infection.rawCounts.csv")
#Get the counts per million (TMM normalised) before filtering
infection.normCPM <- cpm(calcNormFactors(infection))
dim(infection.normCPM)
head(infection.normCPM)
write.csv(infection.normCPM, file="./results/infection.normCPM.csv")
#Keep genes that are expressed at least 1 CPM in at least 3 libraries, normally it is the number of biological replicates of smaller group
infection.filtered <- rowSums(cpm(infection)>1) >=3
table(infection.filtered)
#Libraries size of data BEFORE filtering
infection$samples$lib.size
#cover the original file with our filter data
Infection <- infection[infection.filtered,]
#libraries size of data after filtering
colSums(Infection$counts)
dim(Infection)
#Update the filtered libraries size
Infection$samples$lib.size <- colSums(Infection$counts)
Infection$samples
#Performed normalisation with TMM method
Infection = calcNormFactors(Infection)
#The libraries after normalisation
Infection$samples
#Get the counts per million (TMM normalised) after filtering
Infection.filtered.normCPM <-cpm(calcNormFactors(Infection))
#Export TMM normalized count table after filtering
write.csv(Infection.filtered.normCPM, file="./results/Infection.filtered.normCPM.csv")
#Treatment factor
group<-factor(c('Ha','Ha','Ha',"Ctr","Ctr","Ctr"))
#Ctr is the intercept
Infection.design <- model.matrix(~group)
rownames(Infection.design)<-colnames(Infection$counts)
Infection.design
#Get the counts per million (TMM normalised) after filtering
Infection.filtered.normCPM <-cpm(calcNormFactors(Infection))
#Export TMM normalized count table after filtering
write.csv(Infection.filtered.normCPM, file="./results/Infection.filtered.normCPM.csv")
#Treatment factor
group<-factor(c('Ha','Ha','Ha',"Ctr","Ctr","Ctr"))
#Ctr is the intercept
Infection.design <- model.matrix(~group)
rownames(Infection.design)<-colnames(Infection$counts)
Infection.design
#check outliers
plotMDS(Infection, main="MDS plot of RNA-Seq", labels=colnames(Infection$counts))
#check outliers
plotMDS(Infection, main="MDS plot of RNA-Seq", labels=colnames(Infection$counts))
#Export the MDS plot to a PNG file
png("./results/plotMDS.Infection.png", res=300, height=1800, width=1800)
plotMDS(Infection, main="MDS plot of Infection RNA-Seq", labels=colnames(Infection$counts))
dev.off()
#dispersion
Infection <- estimateGLMCommonDisp(Infection, Infection.design)
#Estimating the trended dispersion
Infection <- estimateGLMTrendedDisp(Infection, Infection.design)
#Estimating the tagwwise dispersion
Infection <- estimateGLMTagwiseDisp(Infection, Infection.design)
#visual representation of the mean-variance relationship and BCV-mean logCPM relationship
plotMeanVar(Infection, show.tagwise.vars=T,NBline=T)
plotBCV(Infection)
knitr::opts_chunk$set(echo = TRUE)
#dispersion
Infection <- estimateGLMCommonDisp(Infection, Infection.design)
#Estimating the trended dispersion
Infection <- estimateGLMTrendedDisp(Infection, Infection.design)
#Estimating the tagwwise dispersion
Infection <- estimateGLMTagwiseDisp(Infection, Infection.design)
#visual representation of the mean-variance relationship and BCV-mean logCPM relationship
plotMeanVar(Infection, show.tagwise.vars=T,NBline=T)
plotBCV(Infection)
#Fit DGEList and design matrix to genewise GLM
Infection.fit <- glmFit(Infection, Infection.design)
colnames(Infection.fit)
lrt.Ha_vs_Ctr <- glmLRT(Infection.fit, coef=2)  # to compare Ha vs Ctr (Ha_vs_Ctr)
t1<-topTags(lrt.Ha_vs_Ctr, n=nrow(Infection))
head(t1$table)
summary(decideTests(lrt.Ha_vs_Ctr, adjust.method="BH", p.value=0.05))
nrow(subset(topTags(lrt.Ha_vs_Ctr, n=586)$table,  logFC > 0))
lrt.Ha_vs_Ctr_UP <- subset(topTags(lrt.Ha_vs_Ctr, n=586)$table, logFC > 0)
lrt.Ha_vs_Ctr_UP <- subset(topTags(lrt.Ha_vs_Ctr, n=586)$table, logFC > 0)
#The DW-regulated genes (can change logFC to be more strict)
nrow(subset(topTags(lrt.Ha_vs_Ctr, n=586)$table,  logFC < 0))
lrt.Ha_vs_Ctr_DW <- subset(topTags(lrt.Ha_vs_Ctr, n=586)$table, logFC < 0)
DEtags.lrt.Ha_vs_Ctr <- rownames(Infection)[as.logical(decideTests(lrt.Ha_vs_Ctr, adjust.method="BH", p.value=0.05))]
write.csv(lrt.Ha_vs_Ctr_UP, file="./results/lrt.Ha_vs_Ctr_UP.csv")
write.csv(lrt.Ha_vs_Ctr_DW, file="./results/lrt.Ha_vs_Ctr_DW.csv")
Infection.colHavsCtr = rep('grey55', nrow(Infection))
Infection.colHavsCtr = rep('grey55', nrow(Infection))
Infection.colHavsCtr[lrt.Ha_vs_Ctr$table$PValue < 0.05 & lrt.Ha_vs_Ctr$table$logFC >0 ] <- "red"
Infection.colHavsCtr[lrt.Ha_vs_Ctr$table$PValue < 0.05 & lrt.Ha_vs_Ctr$table$logFC <0 ] <- "blue"
par(omi=c(0.1,0.1,0.1,0.1), las=1, cex=0.5, mgp=c(3,1,0), cex.main=1.8, cex.lab=1.4, cex.axis=1.4)
plotSmear(lrt.Ha_vs_Ctr, de.tags=DEtags.lrt.Ha_vs_Ctr, xlab="log-counts per million (logCPM)", ylab="log2-fold change (log2FC)", main="Ha infection compared to Control", pch=19, cex=0.4, smearWidth=0.5, panel.first=grid(), smooth.scatter=FALSE, ylim=c(-7,7), yaxs="i")
abline(h=c(-1,1),col="dodgerblue")
par(omi=c(0.1,0.1,0.1,0.1), las=1, cex=0.5, mgp=c(3,1,0), cex.main=1.8, cex.lab=1.4, cex.axis=1.4)
plotSmear(lrt.Ha_vs_Ctr, de.tags=DEtags.lrt.Ha_vs_Ctr, xlab="log-counts per million (logCPM)", ylab="log2-fold change (log2FC)", main="Ha infection compared to Control", pch=19, cex=0.4, smearWidth=0.5, panel.first=grid(), smooth.scatter=FALSE, ylim=c(-7,7), yaxs="i")
abline(h=c(-1,1),col="dodgerblue")
par(omi=c(0.1,0.1,0.1,0.1), las=1, cex=0.5, mgp=c(3,1,0), cex.main=1.8, cex.lab=1.4, cex.axis=1.4)
plotSmear(lrt.Ha_vs_Ctr, xlab="log-counts per million (logCPM)", ylab="log2-fold change (log2FC)", main="a infection compared to Control", smearWidth=0.5, pch=21, cex=0.4, deCol="red", col=Infection.colHavsCtr, ylim=c(-7,7), yaxs="i")
par(omi=c(0.1,0.1,0.1,0.1), las=1, cex=0.5, mgp=c(3,1,0), cex.main=1.8, cex.lab=1.4, cex.axis=1.4)
plotSmear(lrt.Ha_vs_Ctr, xlab="log-counts per million (logCPM)", ylab="log2-fold change (log2FC)", main="a infection compared to Control", smearWidth=0.5, pch=21, cex=0.4, deCol="red", col=Infection.colHavsCtr, ylim=c(-7,7), yaxs="i")
abline(h=c(-1,1),col="dodgerblue")
png("./results/plotSmear.InfectionRNAseq.png", res=300, height=1800, width=1800)
par(omi=c(0.1,0.1,0.1,0.1), las=1, cex=0.5, mgp=c(3,1,0), cex.main=1.8, cex.lab=1.4, cex.axis=1.4)
plotSmear(lrt.Ha_vs_Ctr, xlab="log-counts per million (logCPM)", ylab="log2-fold change (log2FC)", main="Ha infection compared to Control", smearWidth=0.5, pch=21, cex=0.4, deCol="red", col=Infection.colHavsCtr, ylim=c(-7,7), yaxs="i")
abline(h=c(-1,1),col="dodgerblue")
dev.off()
knitr::opts_chunk$set(echo = TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DEA")
#file fileDesc
setwd('E:/UH/FOR-271 Practical Bioinformatics/topic 8/RNA_seq_DEA')
#Set to the current work directory
Coinfection.targets<-read.delim("./data/fileDesc.txt")
#change the rawnames of the dataframe Coinfection.targets
rownames(Coinfection.targets)<-c("Ha1","Ha2","Ha3","Ctr1","Ctr2","Ctr3")
#load package
library(edgeR)
#read files
Coinfection.orig <- readDGE(Coinfection.targets, header=F)
#check the dimension of the data set
dim(Coinfection.orig)
#chreck the first 6 rows of the data
head(Coinfection.orig)
#extract counts dataframe
Coinfection.rawCount <- Coinfection.orig$count
dim(Coinfection.rawCount)
head(Coinfection.rawCount)
#define sampletype: Control and Ha-infection
sampletype <- factor(c(rep("Ha",3), rep("Ctr", 3)))
#Build meta data frame
meta <- data.frame(sampletype, row.names = colnames(Coinfection.orig$count))
#check the column name of counts dataframe
colnames(Coinfection.orig$count)
#check the rowname of meta dataframe
rownames(meta)
#Check that sample names match in both files
all(colnames(Coinfection.orig$count) %in% rownames(meta))
#load the package
library(DESeq2)
dds <- DESeqDataSetFromMatrix(Coinfection.orig, colData = meta, design = ~ sampletype)
#view dds
head(counts(dds))
#generate size factors
dds <- estimateSizeFactors(dds)
#view
sizeFactors(dds)
normalized_counts <- counts(dds, normalized=TRUE)
write.csv(normalized_counts, file="./results/coinfection_normalized_counts_DESeq2.csv")
#transform counts for data visualization
rld <- rlog(dds, blind=TRUE)
#plot PCA
plotPCA(rld, intgroup="sampletype")
#save the plot
pdf("./results/PlotPCA_dds.pdf")
plotPCA(rld, intgroup="sampletype")
dev.off()
rld_mat <- assay(rld)
# compute the pairwise correlation values
rld_cor <- cor(rld_mat)
#check the output
head(rld_cor)
head(meta)
#Install pheatmap package and load the package
install.packages("pheatmap")
?pheatmap # help page for pheatmap
#plot the heatmap
library(pheatmap)
pheatmap(rld_cor, annotation = meta)
pdf("./results/PlotHeatmap_dds.pdf")
heat.colors <- RColorBrewer::brewer.pal(6, "Blues")
pheatmap(rld_cor, annotation = meta, color = heat.colors, border_color=NA, fontsize = 10,
fontsize_row = 10, height=20)
#load EdgeR package
library(edgeR)
options(digits=3)
#read files
infection.targets<-read.delim("./data/fileDesc.txt")
#check Coinfection.targets
infection.targets
#change the rawnames
rownames(infection.targets)<-c("Ha1","Ha2","Ha3","Ctr1","Ctr2","Ctr3")
#check the rawnames
infection.targets
#read and merges the files
infection <- readDGE(infection.targets, header=F)
#Check the dimension of DGElist R object
dim(infection)
#Get the raw mapped count before filtering
infection.rawCount <- infection$count
head(infection.rawCount)
library(ggplot2)
#plot a histogram of the counts for a single sample, ‘Ha1’
ggplot(infection.rawCount) +
geom_histogram(aes(x = Ha1), stat = "bin", bins = 200) +
xlab("Raw expression counts") +
ylab("Number of genes")
#Export the .png file
png("./results/count distribution.png", res=300, height=1800, width=1800)
ggplot(infection.rawCount) +
geom_histogram(aes(x = Ha1), stat = "bin", bins = 200) +
xlab("Raw expression counts") +
ylab("Number of genes")
dev.off()
#Export raw count table into results folder
write.csv(infection.rawCount, file="./results/infection.rawCounts.csv")
#Get the counts per million (TMM normalised) before filtering
infection.normCPM <- cpm(calcNormFactors(infection))
dim(infection.normCPM)
head(infection.normCPM)
write.csv(infection.normCPM, file="./results/infection.normCPM.csv")
#Keep genes that are expressed at least 1 CPM in at least 3 libraries, normally it is the number of biological replicates of smaller group
infection.filtered <- rowSums(cpm(infection)>1) >=3
table(infection.filtered)
#Libraries size of data BEFORE filtering
infection$samples$lib.size
#cover the original file with our filter data
Infection <- infection[infection.filtered,]
#libraries size of data after filtering
colSums(Infection$counts)
dim(Infection)
#Update the filtered libraries size
Infection$samples$lib.size <- colSums(Infection$counts)
Infection$samples
#Performed normalisation with TMM method
Infection = calcNormFactors(Infection)
#The libraries after normalisation
Infection$samples
#Get the counts per million (TMM normalised) after filtering
Infection.filtered.normCPM <-cpm(calcNormFactors(Infection))
#Export TMM normalized count table after filtering
write.csv(Infection.filtered.normCPM, file="./results/Infection.filtered.normCPM.csv")
#Treatment factor
group<-factor(c('Ha','Ha','Ha',"Ctr","Ctr","Ctr"))
#Ctr is the intercept
Infection.design <- model.matrix(~group)
rownames(Infection.design)<-colnames(Infection$counts)
Infection.design
#check outliers
plotMDS(Infection, main="MDS plot of RNA-Seq", labels=colnames(Infection$counts))
#Export the MDS plot to a PNG file
png("./results/plotMDS.Infection.png", res=300, height=1800, width=1800)
plotMDS(Infection, main="MDS plot of Infection RNA-Seq", labels=colnames(Infection$counts))
dev.off()
#dispersion
Infection <- estimateGLMCommonDisp(Infection, Infection.design)
#Estimating the trended dispersion
Infection <- estimateGLMTrendedDisp(Infection, Infection.design)
#Estimating the tagwwise dispersion
Infection <- estimateGLMTagwiseDisp(Infection, Infection.design)
#visual representation of the mean-variance relationship and BCV-mean logCPM relationship
plotMeanVar(Infection, show.tagwise.vars=T,NBline=T)
plotBCV(Infection)
#Fit DGEList and design matrix to genewise GLM
Infection.fit <- glmFit(Infection, Infection.design)
colnames(Infection.fit)
lrt.Ha_vs_Ctr <- glmLRT(Infection.fit, coef=2)  # to compare Ha vs Ctr (Ha_vs_Ctr)
t1<-topTags(lrt.Ha_vs_Ctr, n=nrow(Infection))
head(t1$table)
summary(decideTests(lrt.Ha_vs_Ctr, adjust.method="BH", p.value=0.05))
nrow(subset(topTags(lrt.Ha_vs_Ctr, n=586)$table,  logFC > 0))
lrt.Ha_vs_Ctr_UP <- subset(topTags(lrt.Ha_vs_Ctr, n=586)$table, logFC > 0)
#The DW-regulated genes (can change logFC to be more strict)
nrow(subset(topTags(lrt.Ha_vs_Ctr, n=586)$table,  logFC < 0))
lrt.Ha_vs_Ctr_DW <- subset(topTags(lrt.Ha_vs_Ctr, n=586)$table, logFC < 0)
DEtags.lrt.Ha_vs_Ctr <- rownames(Infection)[as.logical(decideTests(lrt.Ha_vs_Ctr, adjust.method="BH", p.value=0.05))]
write.csv(lrt.Ha_vs_Ctr_UP, file="./results/lrt.Ha_vs_Ctr_UP.csv")
write.csv(lrt.Ha_vs_Ctr_DW, file="./results/lrt.Ha_vs_Ctr_DW.csv")
Infection.colHavsCtr = rep('grey55', nrow(Infection))
Infection.colHavsCtr[lrt.Ha_vs_Ctr$table$PValue < 0.05 & lrt.Ha_vs_Ctr$table$logFC >0 ] <- "red"
Infection.colHavsCtr[lrt.Ha_vs_Ctr$table$PValue < 0.05 & lrt.Ha_vs_Ctr$table$logFC <0 ] <- "blue"
par(omi=c(0.1,0.1,0.1,0.1), las=1, cex=0.5, mgp=c(3,1,0), cex.main=1.8, cex.lab=1.4, cex.axis=1.4)
plotSmear(lrt.Ha_vs_Ctr, de.tags=DEtags.lrt.Ha_vs_Ctr, xlab="log-counts per million (logCPM)", ylab="log2-fold change (log2FC)", main="Ha infection compared to Control", pch=19, cex=0.4, smearWidth=0.5, panel.first=grid(), smooth.scatter=FALSE, ylim=c(-7,7), yaxs="i")
abline(h=c(-1,1),col="dodgerblue")
#Install pheatmap package and load the package
install.packages("pheatmap")
?pheatmap # help page for pheatmap
### Build a file description
```{r}
### Build a file description
```{r}
#change the rawnames of the dataframe Coinfection.targets
rownames(Coinfection.targets)<-c("Ha1","Ha2","Ha3","Ctr1","Ctr2","Ctr3")
```
knitr::opts_chunk$set(echo = TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DEA")
knitr::opts_chunk$set(echo = TRUE)
#file fileDesc
setwd('E:/UH/FOR-271 Practical Bioinformatics/topic 8/RNA_seq_DEA')
#Set to the current work directory
Coinfection.targets<-read.delim("./data/fileDesc.txt")
#change the rawnames of the dataframe Coinfection.targets
rownames(Coinfection.targets)<-c("Ha1","Ha2","Ha3","Ctr1","Ctr2","Ctr3")
#load package
library(edgeR)
#read files
Coinfection.orig <- readDGE(Coinfection.targets, header=F)
#check the dimension of the data set
dim(Coinfection.orig)
#chreck the first 6 rows of the data
head(Coinfection.orig)
#extract counts dataframe
Coinfection.rawCount <- Coinfection.orig$count
dim(Coinfection.rawCount)
head(Coinfection.rawCount)
#define sampletype: Control and Ha-infection
sampletype <- factor(c(rep("Ha",3), rep("Ctr", 3)))
#Build meta data frame
meta <- data.frame(sampletype, row.names = colnames(Coinfection.orig$count))
#check the column name of counts dataframe
colnames(Coinfection.orig$count)
#check the rowname of meta dataframe
rownames(meta)
#Check that sample names match in both files
all(colnames(Coinfection.orig$count) %in% rownames(meta))
#load the package
library(DESeq2)
dds <- DESeqDataSetFromMatrix(Coinfection.orig, colData = meta, design = ~ sampletype)
#view dds
head(counts(dds))
#generate size factors
dds <- estimateSizeFactors(dds)
#view
sizeFactors(dds)
normalized_counts <- counts(dds, normalized=TRUE)
write.csv(normalized_counts, file="./results/coinfection_normalized_counts_DESeq2.csv")
#transform counts for data visualization
rld <- rlog(dds, blind=TRUE)
#plot PCA
plotPCA(rld, intgroup="sampletype")
#save the plot
pdf("./results/PlotPCA_dds.pdf")
plotPCA(rld, intgroup="sampletype")
dev.off()
rld_mat <- assay(rld)
# compute the pairwise correlation values
rld_cor <- cor(rld_mat)
#check the output
head(rld_cor)
#check the data
head(meta)
#plot the heatmap
library(pheatmap)
pheatmap(rld_cor, annotation = meta)
pdf("./results/PlotHeatmap_dds.pdf")
heat.colors <- RColorBrewer::brewer.pal(6, "Blues")
pheatmap(rld_cor, annotation = meta, color = heat.colors, border_color=NA, fontsize = 10,
fontsize_row = 10, height=20)
#load EdgeR package
library(edgeR)
options(digits=3)
#read files
infection.targets<-read.delim("./data/fileDesc.txt")
#check Coinfection.targets
infection.targets
#change the rawnames
rownames(infection.targets)<-c("Ha1","Ha2","Ha3","Ctr1","Ctr2","Ctr3")
#check the rawnames
infection.targets
#read and merges the files
infection <- readDGE(infection.targets, header=F)
#Check the dimension of DGElist R object
dim(infection)
head(infection)
#Get the raw mapped count before filtering
infection.rawCount <- infection$count
head(infection.rawCount)
library(ggplot2)
#plot a histogram of the counts for a single sample, ‘Ha1’
ggplot(infection.rawCount) +
geom_histogram(aes(x = Ha1), stat = "bin", bins = 200) +
xlab("Raw expression counts") +
ylab("Number of genes")
#Export the .png file
png("./results/count distribution.png", res=300, height=1800, width=1800)
ggplot(infection.rawCount) +
geom_histogram(aes(x = Ha1), stat = "bin", bins = 200) +
xlab("Raw expression counts") +
ylab("Number of genes")
dev.off()
#Export raw count table into results folder
write.csv(infection.rawCount, file="./results/infection.rawCounts.csv")
#Get the counts per million (TMM normalised) before filtering
infection.normCPM <- cpm(calcNormFactors(infection))
dim(infection.normCPM)
head(infection.normCPM)
write.csv(infection.normCPM, file="./results/infection.normCPM.csv")
#Keep genes that are expressed at least 1 CPM in at least 3 libraries, normally it is the number of biological replicates of smaller group
infection.filtered <- rowSums(cpm(infection)>1) >=3
table(infection.filtered)
#Libraries size of data BEFORE filtering
infection$samples$lib.size
#cover the original file with our filter data
Infection <- infection[infection.filtered,]
#libraries size of data after filtering
colSums(Infection$counts)
dim(Infection)
#Update the filtered libraries size
Infection$samples$lib.size <- colSums(Infection$counts)
Infection$samples
#Performed normalisation with TMM method
Infection = calcNormFactors(Infection)
#The libraries after normalisation
Infection$samples
#Get the counts per million (TMM normalised) after filtering
Infection.filtered.normCPM <-cpm(calcNormFactors(Infection))
#Export TMM normalized count table after filtering
write.csv(Infection.filtered.normCPM, file="./results/Infection.filtered.normCPM.csv")
#Treatment factor
group<-factor(c('Ha','Ha','Ha',"Ctr","Ctr","Ctr"))
#Ctr is the intercept
Infection.design <- model.matrix(~group)
rownames(Infection.design)<-colnames(Infection$counts)
Infection.design
#check outliers
plotMDS(Infection, main="MDS plot of RNA-Seq", labels=colnames(Infection$counts))
#Export the MDS plot to a PNG file
png("./results/plotMDS.Infection.png", res=300, height=1800, width=1800)
plotMDS(Infection, main="MDS plot of Infection RNA-Seq", labels=colnames(Infection$counts))
dev.off()
#dispersion
Infection <- estimateGLMCommonDisp(Infection, Infection.design)
#Estimating the trended dispersion
Infection <- estimateGLMTrendedDisp(Infection, Infection.design)
#Estimating the tagwwise dispersion
Infection <- estimateGLMTagwiseDisp(Infection, Infection.design)
#visual representation of the mean-variance relationship and BCV-mean logCPM relationship
plotMeanVar(Infection, show.tagwise.vars=T,NBline=T)
plotBCV(Infection)
#Fit DGEList and design matrix to genewise GLM
Infection.fit <- glmFit(Infection, Infection.design)
colnames(Infection.fit)
#Perform likelihood ratio test (LRT) to compare Ha vs Ctr
lrt.Ha_vs_Ctr <- glmLRT(Infection.fit, coef=2)
t1<-topTags(lrt.Ha_vs_Ctr, n=nrow(Infection))
head(t1$table)
summary(decideTests(lrt.Ha_vs_Ctr, adjust.method="BH", p.value=0.05))
nrow(subset(topTags(lrt.Ha_vs_Ctr, n=586)$table,  logFC > 0))
lrt.Ha_vs_Ctr_UP <- subset(topTags(lrt.Ha_vs_Ctr, n=586)$table, logFC > 0)
#The DW-regulated genes (can change logFC to be more strict)
nrow(subset(topTags(lrt.Ha_vs_Ctr, n=586)$table,  logFC < 0))
lrt.Ha_vs_Ctr_DW <- subset(topTags(lrt.Ha_vs_Ctr, n=586)$table, logFC < 0)
DEtags.lrt.Ha_vs_Ctr <- rownames(Infection)[as.logical(decideTests(lrt.Ha_vs_Ctr, adjust.method="BH", p.value=0.05))]
write.csv(lrt.Ha_vs_Ctr_UP, file="./results/lrt.Ha_vs_Ctr_UP.csv")
write.csv(lrt.Ha_vs_Ctr_DW, file="./results/lrt.Ha_vs_Ctr_DW.csv")
Infection.colHavsCtr = rep('grey55', nrow(Infection))
Infection.colHavsCtr[lrt.Ha_vs_Ctr$table$PValue < 0.05 & lrt.Ha_vs_Ctr$table$logFC >0 ] <- "red"
Infection.colHavsCtr[lrt.Ha_vs_Ctr$table$PValue < 0.05 & lrt.Ha_vs_Ctr$table$logFC <0 ] <- "blue"
par(omi=c(0.1,0.1,0.1,0.1), las=1, cex=0.5, mgp=c(3,1,0), cex.main=1.8, cex.lab=1.4, cex.axis=1.4)
plotSmear(lrt.Ha_vs_Ctr, de.tags=DEtags.lrt.Ha_vs_Ctr, xlab="log-counts per million (logCPM)", ylab="log2-fold change (log2FC)", main="Ha infection compared to Control", pch=19, cex=0.4, smearWidth=0.5, panel.first=grid(), smooth.scatter=FALSE, ylim=c(-7,7), yaxs="i")
abline(h=c(-1,1),col="dodgerblue")
par(omi=c(0.1,0.1,0.1,0.1), las=1, cex=0.5, mgp=c(3,1,0), cex.main=1.8, cex.lab=1.4, cex.axis=1.4)
plotSmear(lrt.Ha_vs_Ctr, xlab="log-counts per million (logCPM)", ylab="log2-fold change (log2FC)", main="a infection compared to Control", smearWidth=0.5, pch=21, cex=0.4, deCol="red", col=Infection.colHavsCtr, ylim=c(-7,7), yaxs="i")
abline(h=c(-1,1),col="dodgerblue")
png("./results/plotSmear.InfectionRNAseq.png", res=300, height=1800, width=1800)
par(omi=c(0.1,0.1,0.1,0.1), las=1, cex=0.5, mgp=c(3,1,0), cex.main=1.8, cex.lab=1.4, cex.axis=1.4)
plotSmear(lrt.Ha_vs_Ctr, xlab="log-counts per million (logCPM)", ylab="log2-fold change (log2FC)", main="Ha infection compared to Control", smearWidth=0.5, pch=21, cex=0.4, deCol="red", col=Infection.colHavsCtr, ylim=c(-7,7), yaxs="i")
abline(h=c(-1,1),col="dodgerblue")
dev.off()
